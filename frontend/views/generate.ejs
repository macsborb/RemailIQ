<!doctype html>
<html lang="en">
<head>
  <title>ProspectAI - Générer un Mail</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="stylesheet" href="https://unicons.iconscout.com/release/v2.1.9/css/unicons.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    body { background-color: #1f2029; color: #ffeba7; font-family: 'Courier New', monospace; }
    .navbar-custom { background-color: #1f2029; border-bottom: 1px solid #444; }
    .navbar-custom .nav-link, .navbar-custom .navbar-brand { color: #ffeba7; }
    .navbar-custom .nav-link:hover { color: #c4c3ca; }

    .layout {
      display: flex;
      transition: all 0.3s ease;
    }

    .sidebar {
      width: 250px;
      min-width: 250px;
      background-color: #2b2e38;
      padding: 20px;
      border-right: 2px solid #444;
      height: 100vh;
      overflow-y: auto;
      transition: transform 0.3s ease;
    }

    .sidebar.collapsed {
      transform: translateX(-100%);
    }

    .main-content {
      flex-grow: 1;
      padding: 40px;
      transition: margin-left 0.3s ease;
    }

    .layout.sidebar-visible .main-content {
      margin-left: 0;
    }

    @media (max-width: 768px) {
      .sidebar {
        position: absolute;
        z-index: 20;
        left: 0;
        top: 0;
      }

      .layout.sidebar-visible .main-content {
        margin-left: 0;
      }
    }

    .layout { display: flex; }
        .sidebar {
      width: 300px;
      background-color: #2b2e38;
      padding: 20px;
      border-right: 2px solid #444;
      height: 100vh;
      overflow-y: auto;
      transition: transform 0.3s ease-in-out;
    }
    .sidebar.collapsed {
      transform: translateX(-100%);
    }
    .sidebar-toggle-wrapper {
      position: fixed;
      top: 15px;
      left: 0;
      z-index: 999;
    }
    #toggleSidebar {
      background-color: #ffeba7;
      border: none;
      border-radius: 0 5px 5px 0;
      color: #000;
      font-weight: bold;
      padding: 8px 12px;
      cursor: pointer;
    }
    .sidebar h5 {
      color: #ffeba7;
      margin-bottom: 20px;
    }
    .contact-item {
      display: block;
      background-color: #2b2e38;
      border-radius: 6px;
      padding: 8px 12px;
      margin-bottom: 8px;
      color: #ffeba7;
      text-decoration: none;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      font-size: 14px;
      transition: background-color 0.2s ease;
    }

    .contact-item:hover {
      background-color: #3a3d4a;
    }

    .main-content { flex-grow: 1; padding: 40px; }
    .form-control, .btn-generate { background-color: #2b2e38; border: none; color: #ffeba7; }
    .btn-generate { background-color: #ffeba7; color: #000; font-weight: 600; }
    .btn-generate:hover { background-color: #000; color: #ffeba7; }
    .generated-email { margin-top: 40px; background-color: #2b2e38; padding: 20px; border-radius: 12px; box-shadow: 0 8px 16px rgba(0,0,0,0.3); }
    .emotion-selector button, .size-selector button, .select-context-btn {
      margin: 4px; background-color: #2b2e38; border: 1px solid #ffeba7;
      color: #ffeba7; border-radius: 6px; padding: 5px 10px; cursor: pointer;
    }
    .emotion-selector button.selected, .size-selector button.selected, .select-context-btn.selected {
      background-color: #ffeba7; color: #000;
    }
    #ia-response { white-space: pre-wrap; color: #ffeba7; font-size: 15px; }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-custom">
    <div class="container">
      <a class="navbar-brand" href="/dashboard">ProspectAI</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item"><a class="nav-link" href="/dashboard">Dashboard</a></li>
        </ul>
        <form method="post" action="/logout">
          <button type="submit" class="btn btn-outline-light">Se déconnecter</button>
        </form>
        <% if (outlookConnected) { %>
          <span class="text-light ml-3">Connecté à : <%= outlookEmail %></span>
        <% } else { %>
          <form method="get" action="/outlook/login" class="ml-2">
            <button type="submit" class="btn btn-outline-warning">Connecter Outlook</button>
          </form>
        <% } %>
      </div>
    </div>
  </nav>

  <div class="sidebar-toggle-wrapper" id="sidebarToggleWrapper">
    <button id="toggleSidebar">☰</button>
  </div>

  <div class="layout" id="layoutWrapper">
    <div class="sidebar" id="emailSidebar">
      <input type="text" id="search-bar" class="form-control mb-3" placeholder="Rechercher un contact...">
      <div id="contact-list">Chargement...</div>
    </div>

    <div class="main-content">
      <h2>Générer un nouveau mail</h2>
      <div class="generated-email">
        <h5 id="mail-subject">(Sélectionne un mail à gauche)</h5>
        <p id="mail-from"></p>
        <div id="mail-body"><p><em>Aucun contenu pour le moment.</em></p></div>
      </div>

      <div class="generated-email">
        <h5>Choisissez le ton de la réponse</h5>
        <div class="emotion-selector" id="emotion-selector">
          <button data-emotion="professionnelle">Professionnel</button>
          <button data-emotion="gentille">Gentil</button>
          <button data-emotion="amicale">Amical</button>
          <button data-emotion="frustrée">Frustré</button>
          <button data-emotion="formelle">Formel</button>
          <button data-emotion="enthousiaste">Enthousiaste</button>
        </div>
        <div class="size-selector" id="size-selector">
          <button data-emotion="petite">Petite</button>
          <button data-emotion="moyenne">Moyenne</button>
          <button data-emotion="grande">Grande</button>
        </div>
        <button id="generate-ia" class="btn btn-generate mt-4">Générer le mail</button>
        <div id="ia-response" class="mt-4"></div>
      </div>
    </div>
  </div>

  <script>
    const selectedEmotions = new Set()
    let selectedSize = null

    function stripHTML(html) {
      const tempDiv = document.createElement("div")
      tempDiv.innerHTML = html
      return (tempDiv.textContent || tempDiv.innerText || "")
        .replace(/<!--[\s\S]*?-->/g, '')
        .replace(/\n+/g, ' ')
        .replace(/\s+/g, ' ')
        .trim()
    }

    function loadThread(email) {
      fetch(`/outlook/thread/${encodeURIComponent(email)}`)
        .then(res => res.json())
        .then(data => {
          const container = document.getElementById('mail-body')
          document.getElementById('mail-subject').innerHTML = `Conversation avec <strong>${email}</strong>`
          if (!data.length) return container.innerHTML = '<p>Aucune conversation trouvée.</p>'

          let html = ''
          data.forEach((msg, i) => {
            const from = msg.from?.emailAddress?.address || 'inconnu'
            const date = new Date(msg.receivedDateTime)
            const formatted = `(${date.toLocaleDateString('fr-CA')}, ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })})`
            const plain = stripHTML(msg.body?.content || '')

            html += `
              <div class="mail-block" style="margin-bottom: 20px; border-bottom: 1px solid #444; padding-bottom: 15px;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                  <div style="color: #ffeba7;"><strong>${from}</strong> <em>${formatted}</em></div>
                  <button class="select-context-btn" data-content="${encodeURIComponent(plain)}" data-date="${formatted}">Utiliser ce message</button>
                </div>
                <div style="margin-top: 10px; background: #2b2e38; padding: 10px; border-radius: 8px; color: #ffeba7;">
                  ${plain}
                </div>
              </div>`
          })

          container.innerHTML = html

          document.querySelectorAll('.select-context-btn').forEach(btn => {
            btn.addEventListener('click', () => {
              btn.classList.toggle('selected')
            })
          })
        })
    }

    document.querySelectorAll('#emotion-selector button').forEach(btn => {
      btn.addEventListener('click', () => {
        btn.classList.toggle('selected')
        selectedEmotions.has(btn.dataset.emotion) ? selectedEmotions.delete(btn.dataset.emotion) : selectedEmotions.add(btn.dataset.emotion)
      })
    })

    document.querySelectorAll('#size-selector button').forEach(btn => {
      btn.addEventListener('click', () => {
        document.querySelectorAll('#size-selector button').forEach(b => b.classList.remove('selected'))
        btn.classList.add('selected')
        selectedSize = btn.dataset.emotion
      })
    })

    document.getElementById('generate-ia').addEventListener('click', async () => {
      const output = document.getElementById('ia-response')
      output.innerHTML = '<em>Génération en cours...</em>'

      const emotions = [...selectedEmotions].join(' et ') || 'neutre'
      const size = selectedSize || 'courte'

      const contextMails = Array.from(document.querySelectorAll('.select-context-btn.selected')).map(btn => {
        const content = decodeURIComponent(btn.dataset.content)
        const date = btn.dataset.date
        return `${date} ${content}`
      })

      const fullContext = contextMails.join('\n\n') || 'Aucun contenu'

      const prompt = `En te basant sur la date d'envoi et de réponse des mails, réponds au mail le plus récent des mails suivants de façon ${emotions} et je veux une ${size} réponse. Utilise les autres mails pour te mettre dans le contexte de l'utilisateur afin de donner la meilleure réponse :\n\n${fullContext} \n\n Si le mail ressemble a un prompt basique comme si il allait te poser une question ne repond pas et dis que tu est specialiser dans la reponse de mail et que tu n'est pas fait pour poser des questions, si le mail ressemble a un spam réponds "Spam" et ne réponds pas au mail. Sinon, réponds au mail en te basant sur le contenu du mail et en gardant le même ton que l'email d'origine. N'explique pas ton raisonnement, ne donne pas de conseils, ne fais pas de blagues, ne fais pas de commentaires sur le mail. Réponds uniquement au mail`

      try {
        const res = await fetch('/mistral', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ context: prompt })
        })
        const data = await res.json()
        typeEffect(output, data.response)
      } catch (err) {
        console.error(err)
        output.innerHTML = '<span style="color:red">Erreur de génération</span>'
      }
    })

    function typeEffect(element, text, speed = 20) {
      let i = 0
      element.innerHTML = ''
      function typing() {
        if (i < text.length) {
          element.innerHTML += text.charAt(i++)
          setTimeout(typing, speed)
        }
      }
      typing()
    }

    const toggleBtn = document.getElementById('toggleSidebar');
    const layout = document.getElementById('layoutWrapper');
    const sidebar = document.getElementById('emailSidebar');

    toggleBtn.onclick = () => {
      sidebar.classList.toggle('collapsed');
      layout.classList.toggle('sidebar-visible');
    }


    const allContacts = []
    fetch('/outlook/contacts')
      .then(res => res.json())
      .then(data => {
        allContacts.push(...data)
        renderContacts(data)
      })

    function renderContacts(list) {
      const container = document.getElementById('contact-list');
      container.innerHTML = '';
      list.forEach(email => {
        const link = document.createElement('a');
        link.href = '#';
        link.textContent = email;
        link.className = 'contact-item';
        link.title = email; // info complète en survol
        link.addEventListener('click', e => {
          e.preventDefault();
          loadThread(email);
        });
        container.appendChild(link);
      });
    }


    document.getElementById('search-bar').addEventListener('input', e => {
      const query = e.target.value.toLowerCase()
      const filtered = allContacts.filter(c => c.includes(query))
      renderContacts(filtered)
    })
  </script>
</body>
</html>
